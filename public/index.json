[{"content":"To install AdvantageKit In your project Install Libraries Install Vendor Depo To install the required vendor depo:\nClick the WPILib button in the top-right corner: Click on the \u0026ldquo;Manage Vendor Libraries\u0026rdquo; button click \u0026ldquo;Install new libraries (online)\u0026rdquo;. Now paste the link below into the box presented. \u0026#x1f447;\n\u0026#x1f6d1; Make sure to download the appropriate version for your WPILib version (you can check in the changelogs here). But if you are using the latest version of WPILib (you should be), you can paste in:\nhttps://github.com/Mechanical-Advantage/AdvantageKit/releases/latest/download/AdvantageKit.json Update build.gradle Now, locate the build.gradle file in your project. If you can\u0026rsquo;t see the Explorer view (the menu with the files) hit Ctrl + j.\nbuild.gradle. insert this code before the dependencies block: repositories { maven { url = uri(\u0026#34;https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit\u0026#34;) credentials { username = \u0026#34;Mechanical-Advantage-Bot\u0026#34; password = \u0026#34;\\u0067\\u0068\\u0070\\u005f\\u006e\\u0056\\u0051\\u006a\\u0055\\u004f\\u004c\\u0061\\u0079\\u0066\\u006e\\u0078\\u006e\\u0037\\u0051\\u0049\\u0054\\u0042\\u0032\\u004c\\u004a\\u006d\\u0055\\u0070\\u0073\\u0031\\u006d\\u0037\\u004c\\u005a\\u0030\\u0076\\u0062\\u0070\\u0063\\u0051\u0026#34; } } mavenLocal() } configurations.all { exclude group: \u0026#34;edu.wpi.first.wpilibj\u0026#34; } task(checkAkitInstall, dependsOn: \u0026#34;classes\u0026#34;, type: JavaExec) { mainClass = \u0026#34;org.littletonrobotics.junction.CheckInstall\u0026#34; classpath = sourceSets.main.runtimeClasspath } compileJava.finalizedBy checkAkitInstall before dependencies, like shown below:\n// \u0026lt;-- Right Here dependencies { // ... } \u0026#x1f6d1; Leave the password be, and \u0026#x2757;DON\u0026rsquo;T TURN IT TO PLAINTEXT\u0026#x2757;. This will cause the team Mechanical-Advantage a lot a grief, don\u0026rsquo;t try it.\nInside the dependencies block insert: def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + \u0026#34;/vendordeps/AdvantageKit.json\u0026#34;).text) annotationProcessor \u0026#34;org.littletonrobotics.akit.junction:junction-autolog:$akitJson.version\u0026#34; inside dependencies, like shown below:\n// \u0026lt;-- Not here dependencies { // ... def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + \u0026#34;/vendordeps/AdvantageKit.json\u0026#34;).text) annotationProcessor \u0026#34;org.littletonrobotics.akit.junction:junction-autolog:$akitJson.version\u0026#34; // But there ^, after everything else. } If everything has worked out, you should be able to build. Now you have all libraries install and can move on onto implementation.\nGood Job! \u0026#x1f973;\nImplement Base Code To allow the robot to log, we need to insert some code into the Robot.java file. (located in src\\main\\java\\frc\\robot\\Robot.java)\nChange the Robot class from extending TimedRobot to LoggedRobot. They function the axact same, except for some things listed here. public class Robot extends TimedRobot { //... } \u0026#x2b07;\u0026#xfe0f;\u0026#x2b07;\u0026#xfe0f;\u0026#x2b07;\u0026#xfe0f;\npublic class Robot extends LoggedRobot { //... } Insert the code below into the robotInit() method. Logger.recordMetadata(\u0026#34;ProjectName\u0026#34;, \u0026#34;YourProjectName\u0026#34;); // Set a metadata value if (isReal()) { // If the robot is real (not a sim) log Logger.addDataReceiver(new WPILOGWriter()); // Log to a USB stick (\u0026#34;/U/logs\u0026#34;) Logger.addDataReceiver(new NT4Publisher()); // Publish data to NetworkTables new PowerDistribution(1, ModuleType.kRev); // Enables power distribution logging } else { // If the robot is simulated setUseTiming(false); // Run as fast as possible String logPath = LogFileUtil.findReplayLog(); // Pull the replay log from AdvantageScope (or prompt the user) Logger.setReplaySource(new WPILOGReader(logPath)); // Read replay log Logger.addDataReceiver(new WPILOGWriter(LogFileUtil.addPathSuffix(logPath, \u0026#34;_sim\u0026#34;))); // Save outputs to a new log } // Logger.disableDeterministicTimestamps() // See \u0026#34;Deterministic Timestamps\u0026#34; in the \u0026#34;Understanding Data Flow\u0026#34; page Logger.start(); // Start logging! No more data receivers, replay sources, or metadata values may be added. public void robotInit() { // \u0026lt;-- Here m_robotContainer = new RobotContainer(); } \u0026#x1f6d1; If you are having issues with writing to the USB drive, make sure the drive is:\nin a USB port on the RoboRIO formatted to FAT32 labeled \u0026lsquo;U:\u0026rsquo; also try plugging it into another machine Now that should be all you need to install AdvantageKit on your robot! \u0026#x1f44d;\nLogging with AdvantageKit Logging inputs and other random values with Advantage Kit is extremely simple. Literally just insert:\nWith recordOutput() Logger.recordOutput(\u0026lt;name\u0026gt;, \u0026lt;value\u0026gt;); \u0026lt;name\u0026gt; is a string containing the location and name of the value saved (and thus where it will appear in Advantage Scope). Such as \u0026quot;Odometry/Location\u0026quot; will save the value as Location under the Odometry Folder.\n\u0026lt;value\u0026gt; can be of any rudimentary variable, Translation2d, Pose3d, SwerveModuleState, and Mechanism2d. These are the values that will be logged. All supported variable types are listed here.\nWith @AutoLogOutput Logging can also be done using the @AutoLogOutput annotation. More info here.\npublic class Example { @AutoLogOutput // Logged as \u0026#34;Example/Angle\u0026#34; private double angle = 0.1f; @AutoLogOutput(key = \u0026#34;Custom/Pressed\u0026#34;) // Logged as \u0026#34;Custom/Pressed\u0026#34; public boolean pressed; pressed = true; } If you find time, check out Mechanical Advantage\u0026rsquo;s documentation, as there are many other cool features of AdvantageKit, such as simulation. Also check out AdvantageScope, a nice way to view your logs.\nCredits These instructions were based off Mechanical Advantage\u0026rsquo;s own install instructions. If you have more questions, please check their tutorials or our 2024 comp code, specifically in the SwerveSubsystem.class. All credit goes to team Mechanical Advantage for the wonderful libraries and tools.\n","permalink":"http://localhost:1313/Blog/posts/advantagekit_quickstart/","summary":"To install AdvantageKit In your project Install Libraries Install Vendor Depo To install the required vendor depo:\nClick the WPILib button in the top-right corner: Click on the \u0026ldquo;Manage Vendor Libraries\u0026rdquo; button click \u0026ldquo;Install new libraries (online)\u0026rdquo;. Now paste the link below into the box presented. \u0026#x1f447;\n\u0026#x1f6d1; Make sure to download the appropriate version for your WPILib version (you can check in the changelogs here). But if you are using the latest version of WPILib (you should be), you can paste in:","title":"AdvantageKit Quick-Start"},{"content":"Last summer, me and one of my friends thought it would be cool if we built a model rocket with a payload (Sensors, Camera, Lego Minifig, etc.). So, with the help of another of my friends, we got to work. We decided we wanted our payload to be a microcontroller with Adafruit\u0026rsquo;s BME280 and LSM6DSOX+LIS3MDL breakout boards.\nThe original plan was to use Raspberry Pi\u0026rsquo;s new microcontroller called the Pico (seriously, it is tiny!). I already had one from an auto-clicker project. The only problem\n","permalink":"http://localhost:1313/Blog/posts/pico_rocket/","summary":"Last summer, me and one of my friends thought it would be cool if we built a model rocket with a payload (Sensors, Camera, Lego Minifig, etc.). So, with the help of another of my friends, we got to work. We decided we wanted our payload to be a microcontroller with Adafruit\u0026rsquo;s BME280 and LSM6DSOX+LIS3MDL breakout boards.\nThe original plan was to use Raspberry Pi\u0026rsquo;s new microcontroller called the Pico (seriously, it is tiny!","title":"Pico Powered Rocket"},{"content":"Intro Java is a very versatile and fast programming language. Knowing how to download Java can be extremely useful, especially when you want to do anything with Minecraft: Java Edition. I also recommend it as beginner language, as it teaches you concepts and syntax used in highly performant and robust languages.\nPrerequisites: This guide should be easy, only a basic knowledge of the command line is needed.\nLinux Install SDKMan To download, install, and manage JDKs, SDKMan is my favorite. SDKMan makes having multiple Java installations a breeze. To download and install SDKMan, run:\ncurl -s \u0026#34;https://get.sdkman.io\u0026#34; | bash Then, follow the helpful onscreen instructions and run:\nsource \u0026#34;$HOME/.sdkman/bin/sdkman-init.sh\u0026#34; Have SDKMan print out its version to make sure it works.\nsdk version Choose JDK If the latest version is all you want, thats easy. But, for many applications, you may need a very specific version (or you might just be picky, like me). To download the latest java version you could simply do:\nsdk install java But, if you are picky, you can view their whole catalog by running:\nsdk list java You will be greeted by the most varied list of JDK\u0026rsquo;s I have ever seen. Feel free to scroll through the list and find your favorite (or the one you need). \u0026#x1f604;\n// TODO Actually run this and explain scrolling picking ID\nInstall JVM Once you find the ID of the JDK you want. (I personally want 17.0.2-tem). It can be installed on your machine with the command below:\nsdk install java 17.0.2-tem When it prompts you if you want this to be your default, type Y to accept. This is not necessary, especially if you have multiple installs, but is extremely useful.\nYou did it! Now if you run:\njava -version It should print out its version!\nTips There are plenty of other features within SDKMan. Check out their documentation for all the tricks!\nRaspberry Pi For install instructions for Raspberry Pi, check out the Linux instructions as they are the same, except it will default to ARM when it downloads.\nConclusion I think Java is a great language, and having an easy way to install makes it even better. Huge shout-out to the creators of SDKMan, as they have saved us a huge headache! I hope this guide helped, and have fun! \u0026#x1f44b;\n","permalink":"http://localhost:1313/Blog/posts/linux-install-java/","summary":"Intro Java is a very versatile and fast programming language. Knowing how to download Java can be extremely useful, especially when you want to do anything with Minecraft: Java Edition. I also recommend it as beginner language, as it teaches you concepts and syntax used in highly performant and robust languages.\nPrerequisites: This guide should be easy, only a basic knowledge of the command line is needed.\nLinux Install SDKMan To download, install, and manage JDKs, SDKMan is my favorite.","title":"Install Java on Linux"},{"content":"This is post shows off some of the formatting abilities and styles of PaperMod\n// This is some java code for (int i = 0; i \u0026lt; 7; i++) { System.out.println(\u0026#34;Hello World!\u0026#34;); } # Here is some python for i in range(7): print(\u0026#34;Hello World!\u0026#34;) echo \u0026#34;Hello World\u0026#34; That was a cool demo!\nNow, I love Markdown, and many applications (such as GitHub and Discord) are adopting this simple, but flexible, formatting language. Now, I made this site using a framework called Hugo. Its super cool as it translates Markdown directly into static HTML websites in less than a second! This allows anyone to quickly write a Markdown file, and have it be made into a beautifully formatted webpage!\nNow, you can get many, comunity-made themes for Hugo. I\u0026rsquo;m using PaperMod because of its sleek, modern feel and great customizability.\n","permalink":"http://localhost:1313/Blog/posts/formatting-test/","summary":"This is post shows off some of the formatting abilities and styles of PaperMod\n// This is some java code for (int i = 0; i \u0026lt; 7; i++) { System.out.println(\u0026#34;Hello World!\u0026#34;); } # Here is some python for i in range(7): print(\u0026#34;Hello World!\u0026#34;) echo \u0026#34;Hello World\u0026#34; That was a cool demo!\nNow, I love Markdown, and many applications (such as GitHub and Discord) are adopting this simple, but flexible, formatting language.","title":"Formatting Test"},{"content":"Hello Guys! I\u0026rsquo;m super excited to work on this site. Here I will be able to share my knowledge, especially when it comes to Minecraft server optimization.\n","permalink":"http://localhost:1313/Blog/posts/hello-world/","summary":"Hello Guys! I\u0026rsquo;m super excited to work on this site. Here I will be able to share my knowledge, especially when it comes to Minecraft server optimization.","title":"Hello World!"}]